{"version":3,"sources":["assets/Script/Common/BaseBehavior.ts","assets/Script/Common/BaseLogic.ts","assets/Script/Common/BaseScene.ts","assets/Script/Common/BaseUIBehavior.ts","assets/Script/Common/BaseUILogic.ts","assets/Script/Common/BaseUIScene.ts","assets/Script/Helloworld.ts"],"names":["_a","cc","_decorator","ccclass","property","BaseBehavior","_super","__extends","prototype","_create","onCreate","_start","onStart","data","_resume","onResume","_pause","onPause","_stop","onStop","_finish","onFinish","__decorate","Component","exports","default","BaseLogic","onCloseUI","setEntityID","entityID","this","getEntityID","getPrefabInstance","prefabName","behaviorName","ownerScene","getAnimCache","animName","getPrefabCache","getAtlasCache","atlasName","BaseScene","_this","call","rootNode","onLoad","registerSystemEvent","game","on","EVENT_HIDE","onEnterBackground","EVENT_SHOW","onEnterForeground","callback","event","keyCode","macro","KEY","q","back","onSystemBack","log","systemEvent","SystemEvent","EventType","KEY_DOWN","unRegisterSystemEvent","off","isCloseNetBackground","isSendUserOnOffLine","openDefaultUI","start","startLoading","node","checkLoading","_onLoadingFinish","onLoadingFinish","addEventListener","removeEventListener","attachViewToNodeStart","attachViewToNodeFinish","entityId","_openUI","uiName","extraInfo","closeUI","uiNameOrEntityId","loadUI","uiType","_closeUI","openSystemUI","openDialog","closeDialog","getUIByEntityId","getSceneName","onPreDestroy","onDestroy","clearEntityList","clearDialog","clearSystemUI","addSwallowLayer","delSwallowLayer","BaseBehavior_1","require","BaseUIBehavior","owner","activate","viewData","initView","updateView","loadImgUrl","spr","config","loadLocalImg","target","type","baseUrl","setValue","key","value","getValue","BaseLogic_1","BaseUILogic","init","scene","comName","viewName","initViewData","msgData","loadPrefab","resPath","activateView","view","onDialogAniCallback","addExtraLogic","name","parentNode","clearExtraLogic","_restart","onRestart","initEventListener","sendEvent","eventName","eventData","initNetMsgListener","addNetMsgListener","removeNetMsgListener","cmd","sendNetMsg","isShowTimerOut","getComName","deactivate","clear","pushUI","popUI","switchUI","fromUiName","toUiName","hideAllDialog","isShowDialog","showAllDialog","getDialog","getBehavior","getViewName","updateBehavior","onEnter","onExit","onMaskClick","BaseScene_1","BaseUIScene","stopAll","Helloworld","apply","arguments","label","text","string","Label"],"mappings":"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","sourcesContent":["const {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class BaseBehavior extends cc.Component {\n    // onLoad () {},\n    //生命周期方法\n    //框架方法 使用 _ 开头，避免与creator本身的接口冲突,\n    //\n    _create(){\n\n    }\n    onCreate(){\n\n    }\n    _start(){\n\n    }\n    onStart(data){\n\n    }\n    _resume(){\n\n    }\n    onResume(){\n\n    }\n    _pause(){\n\n    }\n    onPause(){\n\n    }\n    _stop(){\n\n    }\n    onStop(){\n\n    }\n    _finish(){\n\n    }\n    onFinish(){\n\n    }\n}","const {ccclass,property} = cc._decorator;\n\nexport default class BaseLogic{\n    //生命周期方法\n    //框架方法 使用 _ 开头，避免与creator本身的接口冲突,\n    //\n    _create(){\n\n    }\n    onCreate(){\n\n    }\n    _start(){\n\n    }\n    onStart(data){\n\n    }\n    _resume(){\n\n    }\n    onResume(){\n\n    }\n    _pause(){\n\n    }\n    onPause(){\n\n    }\n    _stop(){\n\n    }\n    onStop(){\n\n    }\n    _finish(){\n\n    }\n    onFinish(){\n\n    }\n    onCloseUI(){\n\n    }\n    setEntityID(entityID){\n        this.entityID = entityID;\n    }\n    getEntityID(){\n        return this.entityID;\n    }\n    getPrefabInstance(prefabName,behaviorName){\n        return this.ownerScene.getPrefabInstance(prefabName,behaviorName);\n    }\n    getAnimCache(animName){\n        return this.ownerScene.getAnimCache(animName);\n    }\n    getPrefabCache(prefabName){\n        return this.ownerScene.getPrefabCache(prefabName);\n    }\n    getAtlasCache(atlasName){\n        return this.ownerScene.getAtlasCache(atlasName);\n    }\n}\n","/**\r\n * @author [laoguilaile]\r\n * @email [yinjun322@mail.com]\r\n * @create date 2019-01-17 12:38:22\r\n * @modify date 2019-01-17 12:38:22\r\n * @desc [description]\r\n */\r\n\r\nconst {ccclass,property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class BaseScene extends cc.Component{\r\n    @property\r\n    rootNode:cc.Node = null;\r\n\r\n    constructor(){\r\n        super();\r\n        // cc.log(\"GGGGGGGGGGGGGGGG====>>[%s ctor]\", this.getSceneName(), (new Date().getTime())-cc.__ChangeSceneTime)\r\n        // cc.audioManager.getInstance().loadCommonConfig(commonAudioConfig);\r\n        // cc.audioManager.getInstance().playBg();\r\n    }\r\n    onLoad(){\r\n        // cc.LogUtil.log(\"BaseScene onLoad! [%s]\", this.getSceneName());\r\n        // cc.log(\"GGGGGGGGGGGGGGGG====>>[onLoad]\", (new Date().getTime())-cc.__ChangeSceneTime)\r\n        //TODO:这个节点必须加到scene里面\r\n        // if(globalNode === null)\r\n        // {  \r\n        //     globalNode = new cc.Node('GlobalNode');\r\n        //     globalNode.addComponent(\"Global\");\r\n        //     this.node.parent.addChild(globalNode);\r\n        // }\r\n\r\n        this.registerSystemEvent();\r\n\r\n        //cc.log(\"BaseScene=====>>>>getCachedTextureInfo: \",cc.textureCache.getCachedTextureInfo());\r\n    }\r\n    \r\n    registerSystemEvent(){\r\n        cc.game.on(cc.game.EVENT_HIDE,this.onEnterBackground,this);\r\n        cc.game.on(cc.game.EVENT_SHOW,this.onEnterForeground,this);\r\n\r\n        // if(cc.sys.platform === cc.sys.ANDROID || cc.sys.platform === cc.sys.WIN32 || cc.sys.platform === cc.sys.MACOS){\r\n            let callback = function(event){\r\n                if (event.keyCode === cc.macro.KEY.q || event.keyCode === cc.macro.KEY.back) {\r\n                    // back 键\r\n                    this.onSystemBack();\r\n                    cc.log(\"BaseScene=====>>>>key : \",event.keyCode);\r\n                }\r\n            };\r\n            cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN,callback,this);\r\n        // }\r\n    }\r\n    unRegisterSystemEvent(){\r\n        cc.game.off(cc.game.EVENT_HIDE,this.onEnterBackground,this);\r\n        cc.game.off(cc.game.EVENT_SHOW,this.onEnterForeground,this);\r\n    }\r\n    //切换后台时是否断开网络连接,默认是不断开网络连接，游戏内需要断开网络连接，以便显示断线状态\r\n    isCloseNetBackground(){\r\n        return false;\r\n    }\r\n\r\n    //是否通知服务端玩家离线、上线\r\n    isSendUserOnOffLine(){\r\n        return false;\r\n    }\r\n\r\n    onSystemBack(){\r\n        /*\r\n        //退出的dialog还在不重复显示\r\n        if(this._quitDialogEntityId && this.getUIByEntityId(this._quitDialogEntityId)){\r\n            return;\r\n        }\r\n        var callback = function(isSure){\r\n            if(isSure){\r\n                cc.game.end();\r\n            }\r\n        };\r\n        this._quitDialogEntityId = this.openDialog(\"Tips\", {level: cc.UIDefine.Type.POPUP, msgData: {\r\n            type: 2,\r\n            content: \"您确认退出游戏？\",\r\n            callback:callback,\r\n        }});\r\n        */\r\n    }\r\n    onEnterBackground(){\r\n        /*\r\n        cc.LogUtil.warn(\"BaseScene onEnterBackground! [%s]\", this.getSceneName());\r\n        cc.pvbridge.getInstance().buglyPrintLog(cc.BuglyConfig.LOG_LEVEL_INFO, \"BaseScene\", \"onEnterBackground\");\r\n        if(this.isCloseNetBackground()){\r\n            cc.SgSocketManager.getInstance().disconnect();  \r\n        }\r\n        if(this.isSendUserOnOffLine()){\r\n            // cc.SgSocketManager.getInstance().sendNetMsg(cc.CmdDef.MSG_PLAYER_SEND_OFFLINE_REQ, {type: 0});\r\n        }\r\n        */\r\n    }\r\n    onEnterForeground(){\r\n        /*\r\n        cc.LogUtil.warn(\"BaseScene onEnterForeground! [%s]\", this.getSceneName());\r\n        cc.pvbridge.getInstance().buglyPrintLog(cc.BuglyConfig.LOG_LEVEL_INFO, \"BaseScene\", \"onEnterForeground\");\r\n        if(this.isCloseNetBackground()){\r\n            if(!cc.SgSocketManager.getInstance().isConnect()){\r\n                cc.SgSocketManager.getInstance().reconnect();  \r\n            }\r\n        }\r\n        if(this.isSendUserOnOffLine()){\r\n            cc.SgSocketManager.getInstance().sendNetMsg(cc.CmdDef.MSG_PLAYER_SEND_OFFLINE_REQ, {type: 1});\r\n        }\r\n        */\r\n    }\r\n    _start(data:any){\r\n        /*\r\n        cc.log(\"BaseScene._start\");\r\n        if(!this.UINode){\r\n            cc.error(\"miss the UINode!\");\r\n            return;\r\n        }\r\n        this.normalNode = this.UINode.getChildByName(\"Normal\");\r\n        this.showallNode = this.UINode.getChildByName(\"ShowAll\");\r\n        this.popupNode = this.UINode.getChildByName(\"PopUp\");\r\n        this.systemNode = this.UINode.getChildByName(\"System\");\r\n\r\n\r\n        //当前打开的UI列表,应为栈结构\r\n        // this.curOpenUIList = []; \r\n        this.entityID = 0;\r\n        this.entityList = [];\r\n        this.dialogList = [];\r\n        this.systemUIList = [];\r\n        // this.openDefaultUI(data);\r\n        // this.onStart(data);\r\n\r\n        this.addEventListener(); \r\n        */\r\n    }\r\n\r\n    onStart(data){\r\n\r\n    }\r\n\r\n    openDefaultUI(data){\r\n        \r\n    }\r\n\r\n    start () {\r\n        this.startLoading();\r\n        this.rootNode = this.node;\r\n        // this.rootNode = this.node.getChildByName(\"RootNode\");\r\n    }\r\n    \r\n    startLoading(){\r\n        /*\r\n        this._sTime = new Date().getTime();\r\n        var Config = this.mConfig || {};\r\n        var resConfig = Config.ResConfig || {}; \r\n        //预加载各种资源文件\r\n        this.nResCount = 0;\r\n        \r\n        var self = this;\r\n        var loadFun = function(data){\r\n            if(!data) return;\r\n            if(data.anim){\r\n                data.anim.forEach(element => {\r\n                    if(!cc.ResCache.anim[element]){\r\n                        self.nResCount++;\r\n                        cc.loader.loadRes(element,function(err,clip){\r\n                            cc.ResCache.anim[element] = clip;\r\n                            self.nResCount--;\r\n                            self.checkLoading();\r\n                        });\r\n                    }\r\n                    \r\n                });\r\n            }\r\n            if(data.prefab){\r\n                data.prefab.forEach(element => {\r\n                    if(!cc.ResCache.prefab[element]){\r\n                        self.nResCount++;\r\n                        cc.loadResEx(element,function(err,prefab){\r\n                            self.nResCount--;\r\n                            self.checkLoading();\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n            if(data.atlas){\r\n                data.atlas.forEach(element => {\r\n                    if(!cc.ResCache.atlas[element]){\r\n                        self.nResCount++;\r\n                        cc.loader.loadRes(element,cc.SpriteAtlas,function(err,atlas){\r\n                            cc.ResCache.atlas[element] = atlas;\r\n                            self.nResCount--;\r\n                            self.checkLoading();\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n            if(data.cacheNodes){\r\n                data.cacheNodes.forEach(element => {\r\n                    if(!cc.ResCache.prefab[element]){\r\n                        self.nResCount++;\r\n                        cc.loadResEx(element,function(err,prefab){\r\n                            self.nResCount--;\r\n                            cc.cacheInstantiateNodeByCreate(element);\r\n                            self.checkLoading();\r\n                        });\r\n                    }else{\r\n                        cc.cacheInstantiateNodeByCreate(element);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        loadFun(resConfig.general);\r\n        if(cc.IS_TEST_CACHE){\r\n            loadFun(resConfig.new);\r\n            loadFun(resConfig.old);\r\n        }else{\r\n            loadFun(cc.UIDefine.isNewSkin() ? resConfig.new : resConfig.old);\r\n        }\r\n\r\n        if(this.nResCount===0){\r\n            var nFun = function(){\r\n                this._onLoadingFinish();\r\n            }.bind(this);\r\n            this.node.runAction(cc.callFunc(nFun));\r\n        }\r\n        */\r\n    }\r\n    checkLoading(){\r\n        /*\r\n        if(this.nResCount == 0){\r\n            this._onLoadingFinish();\r\n        }\r\n        */\r\n    }\r\n\r\n    _onLoadingFinish(){\r\n        /*\r\n        let _totalTime = new Date().getTime() - this._sTime;\r\n        // cc.log(\"GGGGGGGGGGGGGGGG====>>  loadRes : \",_totalTime);\r\n        this.onLoadingFinish();\r\n        */\r\n    }\r\n    //虚函数，子类应该从这里开始自己的逻辑\r\n    onLoadingFinish(){\r\n    }\r\n\r\n    addEventListener(){ \r\n        // this.eventListenerListConfig = {\r\n            // \"LoadPrefabOver\": \"attachViewToNode\",\r\n        // };\r\n        // this.eventHandle = new EventHandle();\r\n        // this.eventHandle.init(this, this.eventListenerListConfig);\r\n    }\r\n\r\n    removeEventListener(){\r\n        // if(this.eventHandle){\r\n            // this.eventHandle.clear();\r\n            // this.eventHandle = null;\r\n        // }\r\n        // this.eventListenerListConfig = null;\r\n    }\r\n\r\n    attachViewToNodeStart(data){\r\n        /*\r\n        var view = data.view;\r\n        var level = data.level;\r\n        var zorder = data.zorder;\r\n        var uiCom = this.getUIByEntityId(data.entityId);\r\n        cc.log(\"###[BaseScene.attachViewToNodeStart]\", view.name, level, zorder);\r\n        var uiNode = null\r\n        if(level == UIDefine.Type.NORMAL){\r\n            uiNode = this.normalNode;\r\n        }else if(level == UIDefine.Type.SHOWALL){\r\n            uiNode = this.showallNode;\r\n        }else if(level == UIDefine.Type.POPUP){\r\n            \r\n\r\n            uiNode = data.node || this.popupNode;\r\n        }else if(level == UIDefine.Type.SYSTEM){\r\n            uiNode = this.systemNode;\r\n        }else if(level == UIDefine.Type.CUSTOM){\r\n            var ownerCom = this.getUIByEntityId(data.ownerEntityId);\r\n            if(ownerCom && ownerCom.view){\r\n                if(data.node && \"\" != data.node){\r\n\r\n                    let nodeList = data.node.split('.');\r\n                    uiNode = ownerCom.view;\r\n                    for(let i=0;i<nodeList.length;i++){\r\n                        uiNode = uiNode.getChildByName(nodeList[i]);\r\n                    }\r\n                }else{\r\n                    uiNode = ownerCom.view;\r\n                }\r\n                \r\n            } \r\n        }else{ \r\n            uiNode = this.showallNode;\r\n        }\r\n        if(view && uiNode){\r\n            if(zorder){\r\n                uiNode.addChild(view, zorder);\r\n            }else{\r\n                uiNode.addChild(view);\r\n            } \r\n\r\n            if(uiNode && data && data.resetParentSize === true){\r\n                uiNode.width = view.width;\r\n                uiNode.height = view.height;\r\n            }\r\n        }  \r\n        // if(this.curUICom && level == UIDefine.Type.SHOWALL){\r\n            // this.curUICom.view.active = false;\r\n        // }\r\n        */\r\n\r\n        /*\r\n        //弹窗在这里作动画,以及半透明遮罩\r\n        if(level == UIDefine.Type.POPUP){\r\n            \r\n            let maskBahavior = view.getComponentInChildren(\"DialogMaskBehavior\");\r\n            if(maskBahavior){\r\n                // //隐藏下层的遮罩\r\n                for(var i = this.dialogList.length-2;i>=0;i--)\r\n                {\r\n                    let uiCom = this.getUIByEntityId(this.dialogList[i]);\r\n                    if(uiCom.maskLayer){\r\n                        uiCom.maskLayer.active = false;\r\n                    }\r\n                }\r\n\r\n                let self = this;\r\n                maskBahavior.setMaskClick(function(){\r\n                    let abort = false;\r\n                    if(uiCom.onMaskClick) {\r\n                        abort = uiCom.onMaskClick() != true;\r\n                    }\r\n                    if (!abort) {\r\n                        cc.audioManager.getInstance().play(\"closeWindow\");\r\n                        self.closeUI(data.entityId);\r\n                    }\r\n                }, this);\r\n                \r\n                uiCom.maskLayer = maskBahavior.getMaskLayer();\r\n            }\r\n        }else{\r\n        }\r\n        */\r\n    }\r\n\r\n    attachViewToNodeFinish(entityId){\r\n        /*\r\n        var uiCom = this.getUIByEntityId(entityId);\r\n        //弹窗在这里作动画,以及半透明遮罩\r\n        let maskBahavior = uiCom.rootNode.getComponentInChildren(\"DialogMaskBehavior\");\r\n        if(maskBahavior){\r\n\r\n            let self = this;\r\n            maskBahavior.setMaskClick(function(){\r\n                let abort = false;\r\n                if(uiCom.onMaskClick) {\r\n                    abort = uiCom.onMaskClick() != true;\r\n                }\r\n                if (!abort) {\r\n                    // cc.audioManager.getInstance().play(\"closeWindow\");\r\n                    self.closeUI(entityId);\r\n                }\r\n            }, this);\r\n            \r\n            uiCom.maskLayer = maskBahavior.getMaskLayer();\r\n        } \r\n        \r\n        //移除监听层\r\n        //this.delSwallowLayer();\r\n        */\r\n    }\r\n\r\n    _openUI(uiName, extraInfo){\r\n        /*\r\n        cc.log(\"_openUI \", uiName);\r\n        //添加吞噬层\r\n        this.addSwallowLayer();\r\n        let uiType;\r\n        extraInfo = extraInfo || {};\r\n        if(extraInfo.level){\r\n            switch(extraInfo.level){\r\n                case cc.UIDefine.Type.CUSTOM:\r\n                uiType = \"extraRes\";\r\n                break;\r\n                case cc.UIDefine.Type.POPUP:\r\n                uiType = \"dialogRes\";\r\n                break;\r\n                default:\r\n                uiType = \"uiRes\";\r\n                break;\r\n            }\r\n        }else{\r\n            uiType = \"uiRes\";\r\n        }\r\n        \r\n        let uiCom = this.loadUI(uiName,uiType);\r\n        if(!uiCom.isActivate){ \r\n            extraInfo.view = uiCom.rootNode;\r\n            extraInfo.entityId = uiCom.getEntityID();\r\n            this.attachViewToNodeStart(extraInfo)\r\n            uiCom.activate(extraInfo);\r\n            uiCom._create();\r\n            uiCom._start();\r\n            uiCom._resume();\r\n        }     \r\n        this.entityID = this.entityID + 1;\r\n        uiCom.setEntityID(this.entityID); \r\n        this.entityList[this.entityID] = uiCom;\r\n        return uiCom;\r\n        */\r\n    }\r\n\r\n    closeUI(uiNameOrEntityId){  \r\n        /*\r\n        //首先判断是否是entityId，如果不是就先找到entityID\r\n        let entityId = uiNameOrEntityId;\r\n        if(typeof(uiNameOrEntityId) === \"string\"){\r\n            if(isNaN(parseInt(uiNameOrEntityId))){\r\n                entityId = null;\r\n                for(let i = this.entityID;i>=0;i--)\r\n                {\r\n                    let uiCom = this.entityList[i];\r\n                    if(uiCom){\r\n                        if(uiCom.getComName() == uiNameOrEntityId)\r\n                        {\r\n                            entityId = uiCom.getEntityID();\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                if(entityId === null){\r\n                    cc.warn(\"failed to close UI: \" + uiNameOrEntityId + \"not found\");\r\n                    return;\r\n                }\r\n            }else{\r\n                entityId = parseInt(uiNameOrEntityId);\r\n            }\r\n        }\r\n        this._closeUI(entityId);\r\n        \r\n        if(!this._isChangeScene){\r\n            //如果是dialog,则就清除掉\r\n            this.closeDialog(entityId);\r\n        }\r\n        */\r\n    }\r\n\r\n    loadUI(uiName:string, uiType:string){      \r\n        /*\r\n        cc.log(\"###[UIManager.loadUI]uiName \", uiName); \r\n\r\n        var curSceneName = this.getSceneName();\r\n        var sceneRes = UIDefine.UIRes[curSceneName];     \r\n        if(!sceneRes){\r\n            cc.error(\"invalid sceneRes \", curSceneName);\r\n        }\r\n        var baseInfo = sceneRes[uiType][uiName];\r\n        if(!baseInfo){\r\n           cc.error(\"invalid ui resPath \", uiName);\r\n           return;\r\n        }  \r\n        var logicPath = baseInfo.logicName;\r\n        if(undefined === logicPath || !logicPath){\r\n            logicPath =  uiName + \"Logic\"; \r\n        }         \r\n        // var UIClass = require(logicPath);\r\n        // if(!UIClass){\r\n            // cc.error(\"require invalid class \", logicPath);\r\n        // } \r\n        var uiLogic = null//new UIClass(); \r\n        // this.allUIList[uiName] = uiLogic; \r\n        \r\n        var viewPath = baseInfo.viewPath;\r\n        var viewName = null;\r\n        if(viewPath){\r\n            viewName = baseInfo.viewName;\r\n            if(undefined === viewName || !viewName){\r\n                viewName = uiName;\r\n            }  \r\n        }\r\n        uiLogic.init(this, uiName, viewName);\r\n        if(viewName){\r\n            if(undefined === baseInfo.prefabName || !baseInfo.prefabName){\r\n                viewPath = viewPath + viewName; \r\n            }else{\r\n                viewPath = viewPath + baseInfo.prefabName;\r\n            }\r\n            uiLogic.loadPrefab(viewPath);\r\n        }\r\n        return uiLogic;\r\n        */\r\n    }\r\n\r\n    _closeUI(entityId){\r\n        /*\r\n        let uiCom = this.entityList[entityId];\r\n        //先将UI清除掉\r\n        \r\n        if (uiCom !== undefined && uiCom !== null) {\r\n            cc.LogUtil.warn(\"closeUI: \" + uiCom.getComName());\r\n            if(!this._isChangeScene){\r\n                uiCom.onCloseUI();\r\n                uiCom._pause();\r\n                uiCom._stop();\r\n                uiCom._finish();\r\n            }\r\n            uiCom.deactivate(); \r\n        } else {\r\n            cc.LogUtil.warn(\"failed to close ui: \" + entityId + \" not found\")\r\n        }\r\n\r\n        this.entityList[entityId] = null;\r\n        */\r\n    }\r\n\r\n    //打开系统常驻UI，比如全局的loading,不允许关闭\r\n    openSystemUI(uiName){\r\n        /*\r\n        let extraInfo = {};\r\n        extraInfo.level = cc.UIDefine.Type.SYSTEM;\r\n        let uiCom = this._openUI(uiName,extraInfo);\r\n        this.systemUIList.push(uiCom.getEntityID());\r\n        return uiCom.getEntityID();\r\n        */\r\n    }\r\n\r\n    //TODO: dialoglist 需要优化，应该直接移动logic里面处理，现在scene和logic都有处理\r\n    openDialog(uiName:string,extraInfo){\r\n        /*\r\n        cc.LogUtil.log(\"openDialog \", uiName);\r\n\r\n        let _time = (new Date().getTime());\r\n        cc.pvbridge.getInstance().buglyPrintLog(cc.BuglyConfig.LOG_LEVEL_INFO, \"openDialog\", uiName);\r\n        var uiName = uiName;\r\n        extraInfo = extraInfo || {};\r\n        extraInfo.level = cc.UIDefine.Type.POPUP;\r\n        let uiCom = this._openUI(uiName,extraInfo);\r\n\r\n        this.dialogList.push(uiCom.getEntityID());\r\n\r\n        this.node.runAction(cc.sequence(cc.delayTime(0.01),cc.callFunc(()=>{\r\n            cc.pvbridge.getInstance().reportUIEvent(\"Dialog_\" + uiName,new Date().getTime()-_time);\r\n        })));\r\n\r\n        return uiCom.getEntityID();\r\n        */\r\n    }\r\n\r\n    closeDialog(entityId:number){\r\n        /*\r\n        let index = null;\r\n        for(let i = 0;i<this.dialogList.length;i++)\r\n        {\r\n            if(entityId === this.dialogList[i])\r\n            {\r\n                this.dialogList.splice(i,1);\r\n                index = i;\r\n            }\r\n        }\r\n        if(index == this.dialogList.length){\r\n            if(this.dialogList.length > 0){\r\n                let uiCom = this.getUIByEntityId(this.dialogList[this.dialogList.length - 1]);\r\n                if(uiCom && uiCom.maskLayer)\r\n                      uiCom.maskLayer.opacity = 150;\r\n                  //  uiCom.maskLayer.active = true;\r\n            }\r\n        }\r\n        if(index !== null){\r\n            this._closeUI(entityId);\r\n        }\r\n        return index;\r\n        */\r\n    }\r\n\r\n    getUIByEntityId(entityId:number){\r\n        /*\r\n        return this.entityList[entityId];\r\n        */\r\n    }\r\n\r\n    getSceneName(){\r\n        return \"BaseScene\";\r\n    }\r\n\r\n    getAnimCache(animName){\r\n        /*\r\n        animName = cc.UIDefine.animRes[animName] || animName;\r\n        if(cc.ResCache && cc.ResCache.anim && cc.ResCache.anim[animName]){\r\n            return cc.ResCache.anim[animName];\r\n        }\r\n        */\r\n    }\r\n    getPrefabCache(prefabName){\r\n        /*\r\n        prefabName = cc.UIDefine.prefabRes[prefabName] || prefabName;\r\n        if(cc.ResCache && cc.ResCache.prefab && cc.ResCache.prefab[prefabName]){\r\n            return cc.ResCache.prefab[prefabName];\r\n        }\r\n        */\r\n    }\r\n    getAtlasCache(atlasName:string){\r\n        /*\r\n        atlasName = cc.UIDefine.atlasRes[atlasName] || atlasName;\r\n        if(cc.ResCache && cc.ResCache.atlas && cc.ResCache.atlas[atlasName]){\r\n            return cc.ResCache.atlas[atlasName];\r\n        }\r\n        */\r\n    }\r\n\r\n    onPreDestroy(){\r\n\r\n    }\r\n                \r\n    onDestroy(){\r\n        this.unRegisterSystemEvent();\r\n        /*                                                                                                                                                                                                                                                                                                                                                \r\n        cc.LogUtil.log(\"BaseScene onDestroy! [%s]\", this.getSceneName());\r\n        // cc.log(\"GGGGGGGGGGGGGGGG====>>[%s onDestroy 1]\", this.getSceneName(), (new Date().getTime())-cc.__ChangeSceneTime)\r\n        this._isChangeScene = true;\r\n        this.removeEventListener();\r\n        this.clearEntityList();\r\n        // cc.log(\"GGGGGGGGGGGGGGGG====>>[%s onDestroy 2!]\", this.getSceneName(), (new Date().getTime())-cc.__ChangeSceneTime)\r\n        */\r\n    }\r\n\r\n    clearEntityList(){\r\n        /*\r\n        for(var entityID in this.entityList){\r\n            this._closeUI(entityID);\r\n        }\r\n        */\r\n    }\r\n    clearDialog(){\r\n        /*\r\n        for(var i in this.dialogList){\r\n            var dialogID = this.dialogList[i];\r\n            this._closeUI(dialogID);\r\n        }\r\n        */\r\n    }\r\n    clearSystemUI(){\r\n        /*\r\n        for(var i in this.systemUIList){\r\n            var sysDialogID = this.systemUIList[i];\r\n            this._closeUI(sysDialogID);\r\n        }\r\n        */\r\n    }\r\n    \r\n    addSwallowLayer(){\r\n        /*\r\n        var eventObj = new cc.MJBaseEvent(cc.MJEventDefine.AddSwallowLayer);\r\n        cc.SgMJEventMgr.getInstance().dispatchEvent(eventObj);\r\n        */\r\n    }\r\n\r\n    delSwallowLayer(){\r\n        /*\r\n        var eventObj = new cc.MJBaseEvent(cc.MJEventDefine.DelSwallowLayer);\r\n        cc.SgMJEventMgr.getInstance().dispatchEvent(eventObj);\r\n        */\r\n    }\r\n    // update (dt) {},\r\n}\r\n","import BaseBehavior from \"./BaseBehavior\";\n\nconst {ccclass,property} = cc._decorator;\n@ccclass\nexport default class BaseUIBehavior extends BaseBehavior{\n\n    @property\n    owner:cc.Node;\n\n    constructor() {\n        super();\n        this.owner = null;\n    }\n    activate(owner, viewData){\n        /*\n        this.owner = owner;\n        this.viewData = viewData;\n        this.initView(viewData);\n        */\n    }\n    initView(viewData){\n\n    }\n\n    //behavior只关心自身行为相关的数据\n    updateView(viewData){\n         \n    }\n\n    //sprite加载网络图片,主要用于显示头像这类\n    //远程 url 带图片后缀名\n    //config = url\n    //远程 url 不带图片后缀名，此时必须指定远程图片文件的类型\n    //config = {url: remoteUrl, type: 'png'}\n    loadImgUrl(spr,config,callback){\n        /*\n        if(spr instanceof cc.Sprite){ \n            cc.loadImgEx(config, function (err, texture) {\n                if (err) {\n                    cc.error(\"loadImgUrl error. \", config);\n                    return;\n                }\n                if(spr && cc.isValid(spr) && spr.spriteFrame){\n                    let sf = spr.spriteFrame.clone();\n                    sf.setTexture(texture);\n                    sf.setRect(cc.rect(0, 0, texture.width, texture.height));\n                    sf.setOriginalSize(cc.size({width: texture.width, height: texture.height}));\n                    spr.spriteFrame = sf;\n                }\n                if(callback) callback();\n            });\n        }\n        */\n    }\n    loadLocalImg(target, type, baseUrl){\n        /*\n        var sp = target.node.getComponent(\"cc.Sprite\");\n        if(undefined === sp || null === sp)\n            return;\n        if(undefined === baseUrl || null === baseUrl){ \n            baseUrl = type;\n            type = 1;\n        }\n        if(type === 1){\n            var url = cc.url.raw(baseUrl); \n            var sf = new cc.SpriteFrame();\n            sf.setTexture(url);\n            sp.spriteFrame = sf;\n        }else if(type === 2){\n            sp.spriteFrame = baseUrl;\n        }\n        */ \n    }\n\n    //仅用来设置文字的, 图片的需要重写新方法\n    //也可以获取组件来设置= V =\n    setValue(key, value){\n        /*\n        var label = this.getValue(key);\n        if(label){\n            var labelCom = label.getComponent(\"cc.Label\");\n            if(labelCom){\n                if(undefined !== value)\n                    labelCom.string = value;\n                return;\n            }\n        }\n        if(undefined === value || null === value){\n            cc.log(\"###[BaseUIBehavior.steValue]set invalid value \", key);\n        }\n        var node = this.node.getChildByName(key);\n        if(undefined === node || null === node){ \n            cc.log(\"###[BaseUIBehavior.steValue]invalid key \", key);\n            return;\n        }\n        var labelCom = node.getComponent(\"cc.Label\");\n        if(undefined === labelCom || null === labelCom){\n            cc.log(\"###[BaseUIBehavior.steValue]get invalid component \", key);\n            return;\n        }\n        labelCom.string = value;\n        this[key] = node;\n        */\n    }\n    getValue(key){\n        /*\n        if(undefined === key || \"\" == key || null == key){\n            return null;\n        }\n        if(this[key]){\n            return this[key];\n        }\n        return null;\n        */\n    }\n\n}","import BaseLogic from \"./BaseLogic\";\r\n\r\nconst {ccclass,property} = cc._decorator;\r\n// var UIDefine = require(\"UIDefine\");\r\n// var NetMsgHandle = require(\"NetMsgHandle\");\r\n// var EventHandle = require(\"EventHandle\");\r\n@ccclass\r\nexport default class BaseUILogic extends BaseLogic{\r\n    /*\r\n    ctor() {\r\n        // cc.log(\"###[BaseUILogic.ctor]\");  \r\n        this.uiState = UIDefine.UIState.NONE;\r\n        this.view = null;\r\n\r\n        this.eventHandle = null;\r\n        this.eventListenerConfig = {};  \r\n        this.eventCacheToView = {};\r\n\r\n        this.netMsgHandle = null;\r\n        this.netMsgListenerConfig = {}; \r\n        this.netMsgCacheToView = {};\r\n\r\n        this.extraLogicList = {};\r\n        this.viewData = {};\r\n        this.viewDataCache = [];\r\n\r\n        this.viewName = \"\";\r\n        this.dialogList = [];\r\n    },  \r\n    */\r\n\r\n    init(scene, comName, viewName){\r\n        /*\r\n        this.rootNode = new cc.Node();\r\n        //设置为全屏\r\n        let widget = this.rootNode.addComponent(cc.Widget);\r\n        widget.isAlignTop = true;\r\n        widget.isAlignBottom = true;\r\n        widget.isAlignLeft = true;\r\n        widget.isAlignRight = true;\r\n        widget.top = 0;\r\n        widget.bottom = 0;\r\n        widget.left = 0;\r\n        widget.right = 0;\r\n        this.ownerScene = scene;   \r\n        this.isActivate = false; \r\n        this.comName = comName;  \r\n        this.viewName = viewName;      \r\n        this.initEventListener();\r\n        this.initNetMsgListener();\r\n        */\r\n    }\r\n\r\n    activate(data){ \r\n        /*\r\n        cc.log(\"###[BaseUILogic.activate]name \", this.getComName());    \r\n        this.uiData = data || {};        \t\r\n    \tthis.isActivate = true; \r\n        this.initViewData(data.msgData);\r\n        this.addNetMsgListener();\r\n        this.addEventListener(); \r\n        */\r\n    }\r\n\r\n    //用于View相关的展示数据\r\n    //对于不同的UI可能需要对传入的数据进行解析\r\n    //解析功能由logic负责实现\r\n    initViewData(msgData){ \r\n        /*\r\n        if(msgData){\r\n            this.viewData = msgData; \r\n        }\r\n        */\r\n    }\r\n\r\n\r\n    loadPrefab(resPath){   \r\n        /*\r\n        if(!resPath || \"\" == resPath){\r\n            cc.LogUtil.error(\"resPath is not exist\");\r\n            return;\r\n        }\r\n        var self = this;\r\n        // cc.loader.loadRes(resPath, function(err, prefab){\r\n        cc.loadResEx(resPath, function(err, prefab){\r\n            if(err){\r\n                cc.LogUtil.error(\"prefab is not exist\");\r\n                var eventObj = new cc.MJBaseEvent(cc.MJEventDefine.DelSwallowLayer);\r\n                cc.SgMJEventMgr.getInstance().dispatchEvent(eventObj);\r\n                return;\r\n            }\r\n            //节点不存在\r\n            //如果节点被释放了,就不用再加载了\r\n            if(!self.rootNode || self.rootNode.name === \"\"){\r\n                return;\r\n            }\r\n            //如果logic已经finish销毁了,则不用再把界面加载出来\r\n            if(self.uiState === UIDefine.UIState.FINISH){\r\n                return;\r\n            }\r\n            cc.LogUtil.log(\"BaseUILogic loadPrefab load over \", prefab.name); \r\n            var view = cc.instantiate(prefab);\r\n\r\n            self.rootNode.addChild(view);\r\n            self.view = view;     \r\n\r\n            self.activateView();    \r\n            self.updateBehavior();\r\n        });\r\n        */ \r\n    }\r\n\r\n    //这个必须放到加载资源回调里面执行！\r\n    activateView(view){\r\n        /*\r\n        cc.LogUtil.log(\"BaseUILogic activateView \", this.getViewName());\r\n        var eventBind = this.view.getComponent(this.getViewName() + \"EventBinding\");\r\n        if(eventBind){\r\n            eventBind.activate(this);\r\n        }else{\r\n            cc.log(\"eventBind is nil \", this.getComName());\r\n        }\r\n\r\n        var behavior = this.view.getComponent(this.getViewName() + \"Behavior\");\r\n        if(behavior){\r\n            behavior.activate(this, this.viewData);\r\n        }else{\r\n            cc.log(\"behavior is nil \", this.getComName());\r\n        }\r\n\r\n        var dialogMaskBehavior = this.view.getComponent(\"DialogMaskBehavior\");\r\n        if(dialogMaskBehavior && dialogMaskBehavior[\"setAnimationCallback\"]){\r\n            dialogMaskBehavior[\"setAnimationCallback\"](this, \"onDialogAniCallback\");\r\n        }\r\n        this.ownerScene.attachViewToNodeFinish(this.entityID);\r\n\r\n        if(this.onViewLoad) this.onViewLoad();\r\n        */\r\n    }\r\n\r\n    onDialogAniCallback(){\r\n\r\n    }\r\n\r\n    //适用于嵌套预制件的UI组件\r\n    //view不需要加载，但是需要传入当前组件的某个子节点\r\n    addExtraLogic(name, parentNode, msgData){\r\n        /*\r\n        cc.LogUtil.log(\"BaseUILogic activateView \", this.getViewName(), name);\r\n        var data = {};\r\n        data.level = cc.UIDefine.Type.CUSTOM;\r\n        data.node = parentNode || \"\";\r\n        // data.ownerCom = this.getComName();\r\n        data.ownerEntityId = this.entityID;\r\n        data.msgData = msgData;\r\n        var logic = this._openUI(name, data);\r\n        if(logic)\r\n            this.extraLogicList[name] = logic;\r\n\r\n        //异步加载问题\r\n        if(this.uiState === UIDefine.UIState.PAUSE){\r\n            logic._pause();\r\n        }\r\n\r\n        if(this.uiState === UIDefine.UIState.STOP){\r\n            logic._pause();\r\n            logic._stop();\r\n        }\r\n        return logic;\r\n        */\r\n    }\r\n\r\n    clearExtraLogic(){\r\n        /*\r\n        for(var i in this.extraLogicList){\r\n            var logic = this.extraLogicList[i];\r\n            logic.closeUI();\r\n            //delete this.extraLogicList[logic.getComName()];\r\n        }\r\n        this.extraLogicList = {};\r\n        */\r\n    }\r\n    _create(){\r\n        /*\r\n        if(this.uiState !== UIDefine.UIState.CREATE){\r\n            this.uiState = UIDefine.UIState.CREATE;\r\n            this.onCreate();\r\n        }\r\n        */\r\n    }\r\n\r\n    _start(){\r\n        /*\r\n        if(this.uiState !== UIDefine.UIState.START){\r\n            this.uiState = UIDefine.UIState.START;\r\n            this.rootNode.active = true;\r\n            if(this.netMsgHandle){\r\n                this.netMsgHandle._start();\r\n            }\r\n            if(this.eventHandle){\r\n                this.eventHandle._start();\r\n            }\r\n\r\n\r\n            //显示dialog\r\n            this.showAllDialog();\r\n\r\n            for(var i in this.extraLogicList){\r\n                var logic = this.extraLogicList[i];\r\n                logic._start();\r\n            }\r\n            this.onStart();\r\n        }\r\n        */\r\n    }\r\n\r\n    _restart(){\r\n        /*\r\n        if(this.uiState !== UIDefine.UIState.RESTART){\r\n            this.uiState = UIDefine.UIState.RESTART;\r\n            this.onRestart();\r\n        }\r\n        */\r\n    }\r\n    _pause(){\r\n        /*\r\n        if(this.uiState !== UIDefine.UIState.PAUSE){\r\n            this.uiState = UIDefine.UIState.PAUSE;\r\n\r\n            // if(this.netMsgHandle){\r\n            //     this.netMsgHandle._pause();\r\n            // }\r\n            // if(this.eventHandle){\r\n            //     this.eventHandle._pause();\r\n            // }\r\n\r\n            // //隐藏dialog\r\n            // this.hideAllDialog();\r\n\r\n            // for(var i in this.extraLogicList){\r\n            //     var logic = this.extraLogicList[i];\r\n            //     logic._pause();\r\n            // }\r\n            this.onPause();\r\n        }\r\n        */\r\n    }\r\n    _resume(){\r\n        /*\r\n        if(this.uiState !== UIDefine.UIState.RESUME){\r\n            this.uiState = UIDefine.UIState.RESUME;\r\n            this.onResume();\r\n        }\r\n        */\r\n    }\r\n    _stop(){\r\n        /*\r\n        if(this.uiState !== UIDefine.UIState.STOP){\r\n            this.uiState = UIDefine.UIState.STOP;\r\n            this.rootNode.active = false;\r\n            if(this.netMsgHandle){\r\n                this.netMsgHandle._stop();\r\n            }\r\n            if(this.eventHandle){\r\n                this.eventHandle._stop();\r\n            }\r\n\r\n            //隐藏dialog\r\n            this.hideAllDialog();\r\n\r\n            for(var i in this.extraLogicList){\r\n                var logic = this.extraLogicList[i];\r\n                logic._stop();\r\n            }\r\n            this.onStop();\r\n        }\r\n        */\r\n    }\r\n    _finish(){\r\n        /*\r\n        if(this.uiState !== UIDefine.UIState.FINISH){\r\n            this.uiState = UIDefine.UIState.FINISH;\r\n            if(this.netMsgHandle){\r\n                this.netMsgHandle._finish();\r\n            }\r\n            if(this.eventHandle){\r\n                this.eventHandle._finish();\r\n            }\r\n            for(var i in this.extraLogicList){\r\n                var logic = this.extraLogicList[i];\r\n                logic._finish();\r\n            }\r\n            this.onFinish();\r\n        }\r\n        */\r\n    }\r\n    \r\n    onCreate(){\r\n\r\n    }\r\n    onStart(){\r\n\r\n    }\r\n\r\n    onRestart(){\r\n\r\n    }\r\n\r\n    onPause(){\r\n\r\n    }\r\n    onResume(){\r\n\r\n    }\r\n\r\n    onStop(){\r\n\r\n    }\r\n    onFinish(){\r\n\r\n    }\r\n\r\n    //清理掉自己的东西\r\n    onCloseUI(){\r\n    }\r\n \r\n\r\n    //初始化事件监听\r\n    initEventListener(){        \r\n        cc.log(\"eventListenerConfig is nothing\");\r\n    }\r\n\r\n    addEventListener(){\r\n        /*\r\n        if(!this.eventListenerConfig){\r\n            cc.log(\"eventListenerConfig is nil\");\r\n            return;\r\n        }\r\n        this.eventHandle = new EventHandle();\r\n        this.eventHandle.init(this, this.eventListenerConfig);\r\n        */\r\n    }\r\n    \r\n    removeEventListener(){\r\n        /*\r\n        if(this.eventHandle){\r\n            this.eventHandle.clear();\r\n            delete this.eventHandle;\r\n            this.eventHandle = null;\r\n        }\r\n        */\r\n    }\r\n\r\n    sendEvent(eventName, eventData){\r\n        /*\r\n        if(this.eventHandle){\r\n            this.eventHandle.sendEvent(eventName, eventData);\r\n        }else{\r\n            cc.log(\"sendEvent failed, eventHandle is nil \", eventName);\r\n        }\r\n        */\r\n    }\r\n\r\n    //初始化网络监听\r\n    initNetMsgListener(){        \r\n       cc.log(\"netMsgListenerConfig is nothing\");\r\n    }\r\n\r\n    addNetMsgListener(){\r\n        /*\r\n        this.netMsgHandle = new NetMsgHandle();\r\n        this.netMsgHandle.init(this, this.netMsgListenerConfig);\r\n        */\r\n    }\r\n    removeNetMsgListener(cmd){\r\n        /*\r\n        if(this.netMsgHandle){\r\n            if(cmd){\r\n                this.netMsgHandle.removeNetMsgListener(cmd);\r\n            }else{\r\n                this.netMsgHandle.clear();\r\n                delete this.netMsgHandle;\r\n                this.netMsgHandle = null;\r\n            }\r\n            \r\n        }\r\n        */\r\n    }\r\n\r\n    sendNetMsg(cmd, msgData, isShowTimerOut){\r\n        /*\r\n        if(this.netMsgHandle){\r\n            this.netMsgHandle.sendNetMsg(cmd, msgData, isShowTimerOut);\r\n        }else{\r\n            cc.log(\"sendNetMsg failed, netMsgHandle is nil \", cmd);\r\n        }\r\n        */\r\n    }\r\n\r\n    getComName(){\r\n        // return this.comName;\r\n    }\r\n\r\n    deactivate(){\r\n        this.clear();\r\n    }\r\n\r\n    clear(){\r\n        /*\r\n        this.isActivate = false;\r\n\r\n    \t//移除自定义事件监听\r\n    \tthis.removeEventListener();\r\n    \t//移除网络监听\r\n    \tthis.removeNetMsgListener();\r\n\r\n        if(this.ownerScene && this.ownerScene._isChangeScene){\r\n            return;\r\n        }\r\n        this.clearDialog();\r\n        this.clearExtraLogic();\r\n\r\n        if(this.view){\r\n            this.view.destroy();\r\n            this.view = null;\r\n        }\r\n        */\r\n    }\r\n\r\n    _openUI(uiName, data){\r\n        /*\r\n        if(!this.ownerScene){\r\n            cc.LogUtil.error(\"miss ownerScene\");\r\n            return null;\r\n        }\r\n        return this.ownerScene._openUI(uiName, data);\r\n        */\r\n    }\r\n\r\n    closeUI(uiNameOrEntityId){\r\n        /*\r\n        if(undefined === uiNameOrEntityId || !uiNameOrEntityId || \"\" == uiNameOrEntityId){\r\n            uiNameOrEntityId = this.getEntityID();\r\n        }\r\n        if(!this.ownerScene){\r\n            cc.LogUtil.error(\"miss ownerScene\");\r\n            return;\r\n        }\r\n        this.ownerScene.closeUI(uiNameOrEntityId);\r\n        */\r\n    }\r\n\r\n\r\n    pushUI(uiName,data){\r\n        /*\r\n        cc.LogUtil.log(\"BaseUILogic, pushUI \", this.getComName(), uiName);\r\n        if(!this.ownerScene){\r\n            cc.LogUtil.error(\"miss ownerScene\");\r\n            return null;\r\n        }\r\n        return this.ownerScene.pushUI(uiName, data);\r\n        */\r\n    }\r\n    popUI(){\r\n        /*\r\n        this.ownerScene.popUI();\r\n        */\r\n    }\r\n    switchUI(fromUiName,toUiName,extraInfo){\r\n        /*\r\n        this.ownerScene.switchUI(fromUiName,toUiName,extraInfo);\r\n        */\r\n    }\r\n\r\n    clearDialog(){\r\n        /*\r\n        if(this.dialogList){\r\n            this.dialogList.forEach(entityId => {\r\n                this.closeUI(entityId);\r\n            });\r\n        }\r\n        this.dialogList = [];\r\n        */\r\n    }\r\n\r\n    hideAllDialog(){\r\n        /*\r\n        if(this.dialogList){\r\n            this.dialogList.forEach(entityId => {\r\n                let uiCom = this.ownerScene.getUIByEntityId(entityId);\r\n                if(uiCom && uiCom.view){\r\n                    uiCom.view.active = false;\r\n                }\r\n            });\r\n        }\r\n        */\r\n    }\r\n    isShowDialog(){\r\n        /*\r\n        if(this.dialogList){\r\n            this.dialogList.forEach(entityId => {\r\n                let uiCom = this.ownerScene.getUIByEntityId(entityId);\r\n                if(uiCom && uiCom.view){\r\n                    return true;\r\n                }\r\n            });\r\n        }\r\n        return false;\r\n        */\r\n    }\r\n    showAllDialog(){\r\n        /*\r\n        if(this.dialogList){\r\n            this.dialogList.forEach(entityId => {\r\n                let uiCom = this.ownerScene.getUIByEntityId(entityId);\r\n                if(uiCom && uiCom.view){\r\n                    uiCom.view.active = false;\r\n                }\r\n            });\r\n        }\r\n        */\r\n    }\r\n    openDialog(uiName,data){\r\n        /*\r\n        cc.LogUtil.log(\"BaseUiLogic.openDialog \", this.getComName(), uiName);\r\n        if(!this.ownerScene){\r\n            cc.LogUtil.log(\"miss ownerScene\");\r\n            return null;\r\n        }\r\n        let entityId = this.ownerScene.openDialog(uiName, data);\r\n        this.dialogList.push(entityId)\r\n        return entityId;\r\n        */\r\n    }\r\n    closeDialog(entityId){\r\n        /*\r\n        if(undefined === entityId || \"\" === entityId || null === entityId)\r\n            return;\r\n\r\n        //再判断是否为Dialog,如果是Dialog,则要清除dialog\r\n        for(var i = 0;i<this.dialogList.length;i++)\r\n        {\r\n            if(entityId === this.dialogList[i])\r\n            {\r\n                this.dialogList.splice(i,1);\r\n            }\r\n        }\r\n        return this.ownerScene.closeDialog(entityId);\r\n        */\r\n    }\r\n\r\n    getDialog(entityId){\r\n        return this.ownerScene.getUIByEntityId(entityId);\r\n    }\r\n\r\n    getBehavior(behaviorName){\r\n        /*\r\n        if(undefined === behaviorName || !behaviorName || \"\" == behaviorName){\r\n            behaviorName = this.getViewName();\r\n        }\r\n        var behavior = null;\r\n        if(this.view){\r\n            behavior = this.view.getComponent(behaviorName + \"Behavior\");\r\n        }\r\n        return behavior;\r\n        */\r\n    }\r\n\r\n    getViewName(){\r\n        /*\r\n        if(this.viewName !== \"\")\r\n            return this.viewName;\r\n        return this.getComName();\r\n        */\r\n    }\r\n\r\n    updateBehavior(viewData, behaviorName){\r\n        /*\r\n        //TODO: 多加层判断，避免节点已经被释放了还会去getBebavior,这里需要再接着查下什么情况下节点会被干掉，但是没走clear方法\r\n       if(this.view && this.view.name !== \"\"){\r\n            var behavior = this.getBehavior(behaviorName);\r\n            if(behavior){\r\n                if(this.viewDataCache){\r\n                    //先移除后使用，避免递归调用,导致死循环\r\n                    // for(var i = 0; i < this.viewDataCache.length; i++){\r\n                        // var cache =  this.viewDataCache[i];\r\n                        // behavior.updateView(cache); \r\n                    // }\r\n                    while(this.viewDataCache.length > 0){\r\n                        var cache =  this.viewDataCache.splice(0,1);\r\n                        behavior.updateView(cache[0]); \r\n                    }\r\n                    this.viewDataCache = [];\r\n                }\r\n                if(viewData){\r\n                    behavior.updateView(viewData);\r\n                }\r\n            }\r\n       }else{\r\n            this.viewDataCache.push(viewData);\r\n       } \r\n       */\r\n    }\r\n\r\n    onEnter(){\r\n\r\n    }\r\n\r\n    onExit(){\r\n\r\n    }\r\n\r\n    onMaskClick() {\r\n        return true;\r\n    }\r\n\r\n}\r\n","import BaseScene from \"./BaseScene\";\n\n/**\n * @author [laoguilaile]\n * @email [yinjun322@mail.com]\n * @create date 2018-05-23 02:27:40\n * @modify date 2018-05-23 02:27:40\n * @desc [在BaseScene的基础上面增加UI栈的扩展，支持大厅场景的多页面切换]\n*/\n\nconst {ccclass,property} = cc._decorator;\n\n@ccclass\nexport default class BaseUIScene extends BaseScene{\n\n    _start(data){\n        /*\n        cc.log(\"BaseUIScene._start\");\n        this._super(data);\n\n        \n\n        this.uiStack = [];\n        this.curUICom = null;\n        this.openDefaultUI(data);\n\n        this.onStart(data);\n        */\n    }\n\n    onStart(data){\n\n    }\n\n    openDefaultUI(data){\n        \n    }\n\n    _closeUI(entityId){\n        /*\n        this._super(entityId);\n        //然后判断UI是否在uiStack中，如果在这里，也要清除，同时如果是栈顶则要resume下个UI\n        for(var i = this.uiStack.length-1;i>=0;i--)\n        {\n            if(entityId === this.uiStack[i].getEntityID())\n            {\n                if(i === (this.uiStack.length-1)){\n                    let uiCom = this.uiStack[this.uiStack.length-2];\n                    if(uiCom){\n                        uiCom._restart();\n                        uiCom._start();\n                        uiCom._resume();\n\n                        this.curUICom = uiCom;\n                    }else{\n                        cc.warn(\"failed to resume ui: ui stack is empty\");\n                    }\n                }\n                this.uiStack.splice(i,1);\n                return;\n            }\n        }\n        */\n    }\n\n    // pauseAll: function(){\n        // for(let index = this.uiStack.length-1; index >= 0;index-- ){            \n            // let uiCom = this.uiStack[index];\n            // uiCom._pause();\n        // }\n    // },\n\n    stopAll(){\n        /*\n        for(let index = this.uiStack.length-1; index >= 0;index-- ){            \n            let uiCom = this.uiStack[index];\n            uiCom._pause();\n            uiCom._stop();\n        }\n        */\n    }\n\n    \n\n    //非Dialog的EntityId是正\n    pushUI(uiName,extraInfo){\n        /*\n        cc.log(\"pushUI \", uiName);\n        let _time = (new Date().getTime());\n        this.stopAll();\n        var uiName = uiName;\n        let uiCom = this._openUI(uiName,extraInfo);\n        this.uiStack.push(uiCom);\n        this.curUICom = uiCom;\n\n        this.node.runAction(cc.sequence(cc.delayTime(0.01),cc.callFunc(()=>{\n            cc.pvbridge.getInstance().reportUIEvent(\"pushUI_\" + uiName,new Date().getTime()-_time);\n        })));\n        return uiCom.getEntityID();\n        */\n    }\n    popUI(){\n        /*\n        let uiCom = this.uiStack.pop();\n        if(uiCom){\n            uiCom._pause();\n            uiCom._stop();\n            uiCom._finish();\n            uiCom.deactivate(); \n        }\n\n        uiCom = this.uiStack[this.uiStack.length-1];\n        uiCom._restart();\n        uiCom._start();\n        uiCom._resume();\n        this.curUICom = uiCom;\n        */\n    }\n\n    switchUI(fromUiName,toUiName,extraInfo){\n        /*\n        let findIdx = -1;\n        for(let index = this.uiStack.length-1; index >= 0;index-- ){            \n            var uiCom = this.uiStack[index];\n            if(uiCom.getComName() === fromUiName){\n                findIdx = index;\n                break;\n            }            \n        }\n        if(findIdx !== -1){\n            for(let index = this.uiStack.length-1; index >= 0;index-- ){\n                if(index >= findIdx){\n                    let uiCom = this.uiStack[index];\n                    if(uiCom){\n                        uiCom._pause();\n                        uiCom._stop();\n                        uiCom._finish();\n                        uiCom.deactivate();\n                    }\n                }\n            }\n        }\n\n        this.uiStack.splice(findIdx,this.uiStack.length-findIdx);\n        this.pushUI(toUiName,extraInfo);\n        */\n    }\n\n    \n    //将当前的UILogic Pause\n    openDialog(uiName,extraInfo){\n        /*\n        let entityId = this._super(uiName,extraInfo);\n        //下层PushUi，pause\n        if(this.curUICom){\n            this.curUICom._pause();\n        }\n        return entityId;\n        */\n    }\n\n    closeDialog(entityId){\n        /*\n        let index = this._super(entityId);\n        if(index !== null){\n            //这里判断this.curUICom,是否没有dialog在上面了\n            if(this.curUICom && !this.curUICom.isShowDialog()){\n                this.curUICom._resume();\n            }\n        }\n        */\n    }\n\n    getSceneName(){\n        return \"BaseUIScene\";\n    }\n \n}","const {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class Helloworld extends cc.Component {\n\n    @property(cc.Label)\n    label: cc.Label = null;\n\n    @property\n    text: string = 'hello';\n\n    start () {\n        // init logic\n        this.label.string = this.text;\n    }\n}\n"],"sourceRoot":"/source/","file":"project.dev.js"}