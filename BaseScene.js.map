{"version":3,"sources":["BaseScene.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"../../../../../assets/Script/Common","sourcesContent":["/**\r\n * @author [laoguilaile]\r\n * @email [yinjun322@mail.com]\r\n * @create date 2019-01-17 12:38:22\r\n * @modify date 2019-01-17 12:38:22\r\n * @desc [description]\r\n */\r\n\r\nconst {ccclass,property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class BaseScene extends cc.Component{\r\n    @property\r\n    rootNode:cc.Node = null;\r\n\r\n    constructor(){\r\n        super();\r\n        // cc.log(\"GGGGGGGGGGGGGGGG====>>[%s ctor]\", this.getSceneName(), (new Date().getTime())-cc.__ChangeSceneTime)\r\n        // cc.audioManager.getInstance().loadCommonConfig(commonAudioConfig);\r\n        // cc.audioManager.getInstance().playBg();\r\n    }\r\n    onLoad(){\r\n        // cc.LogUtil.log(\"BaseScene onLoad! [%s]\", this.getSceneName());\r\n        // cc.log(\"GGGGGGGGGGGGGGGG====>>[onLoad]\", (new Date().getTime())-cc.__ChangeSceneTime)\r\n        //TODO:这个节点必须加到scene里面\r\n        // if(globalNode === null)\r\n        // {  \r\n        //     globalNode = new cc.Node('GlobalNode');\r\n        //     globalNode.addComponent(\"Global\");\r\n        //     this.node.parent.addChild(globalNode);\r\n        // }\r\n\r\n        this.registerSystemEvent();\r\n\r\n        //cc.log(\"BaseScene=====>>>>getCachedTextureInfo: \",cc.textureCache.getCachedTextureInfo());\r\n    }\r\n    \r\n    registerSystemEvent(){\r\n        cc.game.on(cc.game.EVENT_HIDE,this.onEnterBackground,this);\r\n        cc.game.on(cc.game.EVENT_SHOW,this.onEnterForeground,this);\r\n\r\n        // if(cc.sys.platform === cc.sys.ANDROID || cc.sys.platform === cc.sys.WIN32 || cc.sys.platform === cc.sys.MACOS){\r\n            let callback = function(event){\r\n                if (event.keyCode === cc.macro.KEY.q || event.keyCode === cc.macro.KEY.back) {\r\n                    // back 键\r\n                    this.onSystemBack();\r\n                    cc.log(\"BaseScene=====>>>>key : \",event.keyCode);\r\n                }\r\n            };\r\n            cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN,callback,this);\r\n        // }\r\n    }\r\n    unRegisterSystemEvent(){\r\n        cc.game.off(cc.game.EVENT_HIDE,this.onEnterBackground,this);\r\n        cc.game.off(cc.game.EVENT_SHOW,this.onEnterForeground,this);\r\n    }\r\n    //切换后台时是否断开网络连接,默认是不断开网络连接，游戏内需要断开网络连接，以便显示断线状态\r\n    isCloseNetBackground(){\r\n        return false;\r\n    }\r\n\r\n    //是否通知服务端玩家离线、上线\r\n    isSendUserOnOffLine(){\r\n        return false;\r\n    }\r\n\r\n    onSystemBack(){\r\n        /*\r\n        //退出的dialog还在不重复显示\r\n        if(this._quitDialogEntityId && this.getUIByEntityId(this._quitDialogEntityId)){\r\n            return;\r\n        }\r\n        var callback = function(isSure){\r\n            if(isSure){\r\n                cc.game.end();\r\n            }\r\n        };\r\n        this._quitDialogEntityId = this.openDialog(\"Tips\", {level: cc.UIDefine.Type.POPUP, msgData: {\r\n            type: 2,\r\n            content: \"您确认退出游戏？\",\r\n            callback:callback,\r\n        }});\r\n        */\r\n    }\r\n    onEnterBackground(){\r\n        /*\r\n        cc.LogUtil.warn(\"BaseScene onEnterBackground! [%s]\", this.getSceneName());\r\n        cc.pvbridge.getInstance().buglyPrintLog(cc.BuglyConfig.LOG_LEVEL_INFO, \"BaseScene\", \"onEnterBackground\");\r\n        if(this.isCloseNetBackground()){\r\n            cc.SgSocketManager.getInstance().disconnect();  \r\n        }\r\n        if(this.isSendUserOnOffLine()){\r\n            // cc.SgSocketManager.getInstance().sendNetMsg(cc.CmdDef.MSG_PLAYER_SEND_OFFLINE_REQ, {type: 0});\r\n        }\r\n        */\r\n    }\r\n    onEnterForeground(){\r\n        /*\r\n        cc.LogUtil.warn(\"BaseScene onEnterForeground! [%s]\", this.getSceneName());\r\n        cc.pvbridge.getInstance().buglyPrintLog(cc.BuglyConfig.LOG_LEVEL_INFO, \"BaseScene\", \"onEnterForeground\");\r\n        if(this.isCloseNetBackground()){\r\n            if(!cc.SgSocketManager.getInstance().isConnect()){\r\n                cc.SgSocketManager.getInstance().reconnect();  \r\n            }\r\n        }\r\n        if(this.isSendUserOnOffLine()){\r\n            cc.SgSocketManager.getInstance().sendNetMsg(cc.CmdDef.MSG_PLAYER_SEND_OFFLINE_REQ, {type: 1});\r\n        }\r\n        */\r\n    }\r\n    _start(data:any){\r\n        /*\r\n        cc.log(\"BaseScene._start\");\r\n        if(!this.UINode){\r\n            cc.error(\"miss the UINode!\");\r\n            return;\r\n        }\r\n        this.normalNode = this.UINode.getChildByName(\"Normal\");\r\n        this.showallNode = this.UINode.getChildByName(\"ShowAll\");\r\n        this.popupNode = this.UINode.getChildByName(\"PopUp\");\r\n        this.systemNode = this.UINode.getChildByName(\"System\");\r\n\r\n\r\n        //当前打开的UI列表,应为栈结构\r\n        // this.curOpenUIList = []; \r\n        this.entityID = 0;\r\n        this.entityList = [];\r\n        this.dialogList = [];\r\n        this.systemUIList = [];\r\n        // this.openDefaultUI(data);\r\n        // this.onStart(data);\r\n\r\n        this.addEventListener(); \r\n        */\r\n    }\r\n\r\n    onStart(data){\r\n\r\n    }\r\n\r\n    openDefaultUI(data){\r\n        \r\n    }\r\n\r\n    start () {\r\n        this.startLoading();\r\n        this.rootNode = this.node;\r\n        // this.rootNode = this.node.getChildByName(\"RootNode\");\r\n    }\r\n    \r\n    startLoading(){\r\n        /*\r\n        this._sTime = new Date().getTime();\r\n        var Config = this.mConfig || {};\r\n        var resConfig = Config.ResConfig || {}; \r\n        //预加载各种资源文件\r\n        this.nResCount = 0;\r\n        \r\n        var self = this;\r\n        var loadFun = function(data){\r\n            if(!data) return;\r\n            if(data.anim){\r\n                data.anim.forEach(element => {\r\n                    if(!cc.ResCache.anim[element]){\r\n                        self.nResCount++;\r\n                        cc.loader.loadRes(element,function(err,clip){\r\n                            cc.ResCache.anim[element] = clip;\r\n                            self.nResCount--;\r\n                            self.checkLoading();\r\n                        });\r\n                    }\r\n                    \r\n                });\r\n            }\r\n            if(data.prefab){\r\n                data.prefab.forEach(element => {\r\n                    if(!cc.ResCache.prefab[element]){\r\n                        self.nResCount++;\r\n                        cc.loadResEx(element,function(err,prefab){\r\n                            self.nResCount--;\r\n                            self.checkLoading();\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n            if(data.atlas){\r\n                data.atlas.forEach(element => {\r\n                    if(!cc.ResCache.atlas[element]){\r\n                        self.nResCount++;\r\n                        cc.loader.loadRes(element,cc.SpriteAtlas,function(err,atlas){\r\n                            cc.ResCache.atlas[element] = atlas;\r\n                            self.nResCount--;\r\n                            self.checkLoading();\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n            if(data.cacheNodes){\r\n                data.cacheNodes.forEach(element => {\r\n                    if(!cc.ResCache.prefab[element]){\r\n                        self.nResCount++;\r\n                        cc.loadResEx(element,function(err,prefab){\r\n                            self.nResCount--;\r\n                            cc.cacheInstantiateNodeByCreate(element);\r\n                            self.checkLoading();\r\n                        });\r\n                    }else{\r\n                        cc.cacheInstantiateNodeByCreate(element);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        loadFun(resConfig.general);\r\n        if(cc.IS_TEST_CACHE){\r\n            loadFun(resConfig.new);\r\n            loadFun(resConfig.old);\r\n        }else{\r\n            loadFun(cc.UIDefine.isNewSkin() ? resConfig.new : resConfig.old);\r\n        }\r\n\r\n        if(this.nResCount===0){\r\n            var nFun = function(){\r\n                this._onLoadingFinish();\r\n            }.bind(this);\r\n            this.node.runAction(cc.callFunc(nFun));\r\n        }\r\n        */\r\n    }\r\n    checkLoading(){\r\n        /*\r\n        if(this.nResCount == 0){\r\n            this._onLoadingFinish();\r\n        }\r\n        */\r\n    }\r\n\r\n    _onLoadingFinish(){\r\n        /*\r\n        let _totalTime = new Date().getTime() - this._sTime;\r\n        // cc.log(\"GGGGGGGGGGGGGGGG====>>  loadRes : \",_totalTime);\r\n        this.onLoadingFinish();\r\n        */\r\n    }\r\n    //虚函数，子类应该从这里开始自己的逻辑\r\n    onLoadingFinish(){\r\n    }\r\n\r\n    addEventListener(){ \r\n        // this.eventListenerListConfig = {\r\n            // \"LoadPrefabOver\": \"attachViewToNode\",\r\n        // };\r\n        // this.eventHandle = new EventHandle();\r\n        // this.eventHandle.init(this, this.eventListenerListConfig);\r\n    }\r\n\r\n    removeEventListener(){\r\n        // if(this.eventHandle){\r\n            // this.eventHandle.clear();\r\n            // this.eventHandle = null;\r\n        // }\r\n        // this.eventListenerListConfig = null;\r\n    }\r\n\r\n    attachViewToNodeStart(data){\r\n        /*\r\n        var view = data.view;\r\n        var level = data.level;\r\n        var zorder = data.zorder;\r\n        var uiCom = this.getUIByEntityId(data.entityId);\r\n        cc.log(\"###[BaseScene.attachViewToNodeStart]\", view.name, level, zorder);\r\n        var uiNode = null\r\n        if(level == UIDefine.Type.NORMAL){\r\n            uiNode = this.normalNode;\r\n        }else if(level == UIDefine.Type.SHOWALL){\r\n            uiNode = this.showallNode;\r\n        }else if(level == UIDefine.Type.POPUP){\r\n            \r\n\r\n            uiNode = data.node || this.popupNode;\r\n        }else if(level == UIDefine.Type.SYSTEM){\r\n            uiNode = this.systemNode;\r\n        }else if(level == UIDefine.Type.CUSTOM){\r\n            var ownerCom = this.getUIByEntityId(data.ownerEntityId);\r\n            if(ownerCom && ownerCom.view){\r\n                if(data.node && \"\" != data.node){\r\n\r\n                    let nodeList = data.node.split('.');\r\n                    uiNode = ownerCom.view;\r\n                    for(let i=0;i<nodeList.length;i++){\r\n                        uiNode = uiNode.getChildByName(nodeList[i]);\r\n                    }\r\n                }else{\r\n                    uiNode = ownerCom.view;\r\n                }\r\n                \r\n            } \r\n        }else{ \r\n            uiNode = this.showallNode;\r\n        }\r\n        if(view && uiNode){\r\n            if(zorder){\r\n                uiNode.addChild(view, zorder);\r\n            }else{\r\n                uiNode.addChild(view);\r\n            } \r\n\r\n            if(uiNode && data && data.resetParentSize === true){\r\n                uiNode.width = view.width;\r\n                uiNode.height = view.height;\r\n            }\r\n        }  \r\n        // if(this.curUICom && level == UIDefine.Type.SHOWALL){\r\n            // this.curUICom.view.active = false;\r\n        // }\r\n        */\r\n\r\n        /*\r\n        //弹窗在这里作动画,以及半透明遮罩\r\n        if(level == UIDefine.Type.POPUP){\r\n            \r\n            let maskBahavior = view.getComponentInChildren(\"DialogMaskBehavior\");\r\n            if(maskBahavior){\r\n                // //隐藏下层的遮罩\r\n                for(var i = this.dialogList.length-2;i>=0;i--)\r\n                {\r\n                    let uiCom = this.getUIByEntityId(this.dialogList[i]);\r\n                    if(uiCom.maskLayer){\r\n                        uiCom.maskLayer.active = false;\r\n                    }\r\n                }\r\n\r\n                let self = this;\r\n                maskBahavior.setMaskClick(function(){\r\n                    let abort = false;\r\n                    if(uiCom.onMaskClick) {\r\n                        abort = uiCom.onMaskClick() != true;\r\n                    }\r\n                    if (!abort) {\r\n                        cc.audioManager.getInstance().play(\"closeWindow\");\r\n                        self.closeUI(data.entityId);\r\n                    }\r\n                }, this);\r\n                \r\n                uiCom.maskLayer = maskBahavior.getMaskLayer();\r\n            }\r\n        }else{\r\n        }\r\n        */\r\n    }\r\n\r\n    attachViewToNodeFinish(entityId){\r\n        /*\r\n        var uiCom = this.getUIByEntityId(entityId);\r\n        //弹窗在这里作动画,以及半透明遮罩\r\n        let maskBahavior = uiCom.rootNode.getComponentInChildren(\"DialogMaskBehavior\");\r\n        if(maskBahavior){\r\n\r\n            let self = this;\r\n            maskBahavior.setMaskClick(function(){\r\n                let abort = false;\r\n                if(uiCom.onMaskClick) {\r\n                    abort = uiCom.onMaskClick() != true;\r\n                }\r\n                if (!abort) {\r\n                    // cc.audioManager.getInstance().play(\"closeWindow\");\r\n                    self.closeUI(entityId);\r\n                }\r\n            }, this);\r\n            \r\n            uiCom.maskLayer = maskBahavior.getMaskLayer();\r\n        } \r\n        \r\n        //移除监听层\r\n        //this.delSwallowLayer();\r\n        */\r\n    }\r\n\r\n    _openUI(uiName, extraInfo){\r\n        /*\r\n        cc.log(\"_openUI \", uiName);\r\n        //添加吞噬层\r\n        this.addSwallowLayer();\r\n        let uiType;\r\n        extraInfo = extraInfo || {};\r\n        if(extraInfo.level){\r\n            switch(extraInfo.level){\r\n                case cc.UIDefine.Type.CUSTOM:\r\n                uiType = \"extraRes\";\r\n                break;\r\n                case cc.UIDefine.Type.POPUP:\r\n                uiType = \"dialogRes\";\r\n                break;\r\n                default:\r\n                uiType = \"uiRes\";\r\n                break;\r\n            }\r\n        }else{\r\n            uiType = \"uiRes\";\r\n        }\r\n        \r\n        let uiCom = this.loadUI(uiName,uiType);\r\n        if(!uiCom.isActivate){ \r\n            extraInfo.view = uiCom.rootNode;\r\n            extraInfo.entityId = uiCom.getEntityID();\r\n            this.attachViewToNodeStart(extraInfo)\r\n            uiCom.activate(extraInfo);\r\n            uiCom._create();\r\n            uiCom._start();\r\n            uiCom._resume();\r\n        }     \r\n        this.entityID = this.entityID + 1;\r\n        uiCom.setEntityID(this.entityID); \r\n        this.entityList[this.entityID] = uiCom;\r\n        return uiCom;\r\n        */\r\n    }\r\n\r\n    closeUI(uiNameOrEntityId){  \r\n        /*\r\n        //首先判断是否是entityId，如果不是就先找到entityID\r\n        let entityId = uiNameOrEntityId;\r\n        if(typeof(uiNameOrEntityId) === \"string\"){\r\n            if(isNaN(parseInt(uiNameOrEntityId))){\r\n                entityId = null;\r\n                for(let i = this.entityID;i>=0;i--)\r\n                {\r\n                    let uiCom = this.entityList[i];\r\n                    if(uiCom){\r\n                        if(uiCom.getComName() == uiNameOrEntityId)\r\n                        {\r\n                            entityId = uiCom.getEntityID();\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                if(entityId === null){\r\n                    cc.warn(\"failed to close UI: \" + uiNameOrEntityId + \"not found\");\r\n                    return;\r\n                }\r\n            }else{\r\n                entityId = parseInt(uiNameOrEntityId);\r\n            }\r\n        }\r\n        this._closeUI(entityId);\r\n        \r\n        if(!this._isChangeScene){\r\n            //如果是dialog,则就清除掉\r\n            this.closeDialog(entityId);\r\n        }\r\n        */\r\n    }\r\n\r\n    loadUI(uiName:string, uiType:string){      \r\n        /*\r\n        cc.log(\"###[UIManager.loadUI]uiName \", uiName); \r\n\r\n        var curSceneName = this.getSceneName();\r\n        var sceneRes = UIDefine.UIRes[curSceneName];     \r\n        if(!sceneRes){\r\n            cc.error(\"invalid sceneRes \", curSceneName);\r\n        }\r\n        var baseInfo = sceneRes[uiType][uiName];\r\n        if(!baseInfo){\r\n           cc.error(\"invalid ui resPath \", uiName);\r\n           return;\r\n        }  \r\n        var logicPath = baseInfo.logicName;\r\n        if(undefined === logicPath || !logicPath){\r\n            logicPath =  uiName + \"Logic\"; \r\n        }         \r\n        // var UIClass = require(logicPath);\r\n        // if(!UIClass){\r\n            // cc.error(\"require invalid class \", logicPath);\r\n        // } \r\n        var uiLogic = null//new UIClass(); \r\n        // this.allUIList[uiName] = uiLogic; \r\n        \r\n        var viewPath = baseInfo.viewPath;\r\n        var viewName = null;\r\n        if(viewPath){\r\n            viewName = baseInfo.viewName;\r\n            if(undefined === viewName || !viewName){\r\n                viewName = uiName;\r\n            }  \r\n        }\r\n        uiLogic.init(this, uiName, viewName);\r\n        if(viewName){\r\n            if(undefined === baseInfo.prefabName || !baseInfo.prefabName){\r\n                viewPath = viewPath + viewName; \r\n            }else{\r\n                viewPath = viewPath + baseInfo.prefabName;\r\n            }\r\n            uiLogic.loadPrefab(viewPath);\r\n        }\r\n        return uiLogic;\r\n        */\r\n    }\r\n\r\n    _closeUI(entityId){\r\n        /*\r\n        let uiCom = this.entityList[entityId];\r\n        //先将UI清除掉\r\n        \r\n        if (uiCom !== undefined && uiCom !== null) {\r\n            cc.LogUtil.warn(\"closeUI: \" + uiCom.getComName());\r\n            if(!this._isChangeScene){\r\n                uiCom.onCloseUI();\r\n                uiCom._pause();\r\n                uiCom._stop();\r\n                uiCom._finish();\r\n            }\r\n            uiCom.deactivate(); \r\n        } else {\r\n            cc.LogUtil.warn(\"failed to close ui: \" + entityId + \" not found\")\r\n        }\r\n\r\n        this.entityList[entityId] = null;\r\n        */\r\n    }\r\n\r\n    //打开系统常驻UI，比如全局的loading,不允许关闭\r\n    openSystemUI(uiName){\r\n        /*\r\n        let extraInfo = {};\r\n        extraInfo.level = cc.UIDefine.Type.SYSTEM;\r\n        let uiCom = this._openUI(uiName,extraInfo);\r\n        this.systemUIList.push(uiCom.getEntityID());\r\n        return uiCom.getEntityID();\r\n        */\r\n    }\r\n\r\n    //TODO: dialoglist 需要优化，应该直接移动logic里面处理，现在scene和logic都有处理\r\n    openDialog(uiName:string,extraInfo){\r\n        /*\r\n        cc.LogUtil.log(\"openDialog \", uiName);\r\n\r\n        let _time = (new Date().getTime());\r\n        cc.pvbridge.getInstance().buglyPrintLog(cc.BuglyConfig.LOG_LEVEL_INFO, \"openDialog\", uiName);\r\n        var uiName = uiName;\r\n        extraInfo = extraInfo || {};\r\n        extraInfo.level = cc.UIDefine.Type.POPUP;\r\n        let uiCom = this._openUI(uiName,extraInfo);\r\n\r\n        this.dialogList.push(uiCom.getEntityID());\r\n\r\n        this.node.runAction(cc.sequence(cc.delayTime(0.01),cc.callFunc(()=>{\r\n            cc.pvbridge.getInstance().reportUIEvent(\"Dialog_\" + uiName,new Date().getTime()-_time);\r\n        })));\r\n\r\n        return uiCom.getEntityID();\r\n        */\r\n    }\r\n\r\n    closeDialog(entityId:number){\r\n        /*\r\n        let index = null;\r\n        for(let i = 0;i<this.dialogList.length;i++)\r\n        {\r\n            if(entityId === this.dialogList[i])\r\n            {\r\n                this.dialogList.splice(i,1);\r\n                index = i;\r\n            }\r\n        }\r\n        if(index == this.dialogList.length){\r\n            if(this.dialogList.length > 0){\r\n                let uiCom = this.getUIByEntityId(this.dialogList[this.dialogList.length - 1]);\r\n                if(uiCom && uiCom.maskLayer)\r\n                      uiCom.maskLayer.opacity = 150;\r\n                  //  uiCom.maskLayer.active = true;\r\n            }\r\n        }\r\n        if(index !== null){\r\n            this._closeUI(entityId);\r\n        }\r\n        return index;\r\n        */\r\n    }\r\n\r\n    getUIByEntityId(entityId:number){\r\n        /*\r\n        return this.entityList[entityId];\r\n        */\r\n    }\r\n\r\n    getSceneName(){\r\n        return \"BaseScene\";\r\n    }\r\n\r\n    getAnimCache(animName){\r\n        /*\r\n        animName = cc.UIDefine.animRes[animName] || animName;\r\n        if(cc.ResCache && cc.ResCache.anim && cc.ResCache.anim[animName]){\r\n            return cc.ResCache.anim[animName];\r\n        }\r\n        */\r\n    }\r\n    getPrefabCache(prefabName){\r\n        /*\r\n        prefabName = cc.UIDefine.prefabRes[prefabName] || prefabName;\r\n        if(cc.ResCache && cc.ResCache.prefab && cc.ResCache.prefab[prefabName]){\r\n            return cc.ResCache.prefab[prefabName];\r\n        }\r\n        */\r\n    }\r\n    getAtlasCache(atlasName:string){\r\n        /*\r\n        atlasName = cc.UIDefine.atlasRes[atlasName] || atlasName;\r\n        if(cc.ResCache && cc.ResCache.atlas && cc.ResCache.atlas[atlasName]){\r\n            return cc.ResCache.atlas[atlasName];\r\n        }\r\n        */\r\n    }\r\n\r\n    onPreDestroy(){\r\n\r\n    }\r\n                \r\n    onDestroy(){\r\n        this.unRegisterSystemEvent();\r\n        /*                                                                                                                                                                                                                                                                                                                                                \r\n        cc.LogUtil.log(\"BaseScene onDestroy! [%s]\", this.getSceneName());\r\n        // cc.log(\"GGGGGGGGGGGGGGGG====>>[%s onDestroy 1]\", this.getSceneName(), (new Date().getTime())-cc.__ChangeSceneTime)\r\n        this._isChangeScene = true;\r\n        this.removeEventListener();\r\n        this.clearEntityList();\r\n        // cc.log(\"GGGGGGGGGGGGGGGG====>>[%s onDestroy 2!]\", this.getSceneName(), (new Date().getTime())-cc.__ChangeSceneTime)\r\n        */\r\n    }\r\n\r\n    clearEntityList(){\r\n        /*\r\n        for(var entityID in this.entityList){\r\n            this._closeUI(entityID);\r\n        }\r\n        */\r\n    }\r\n    clearDialog(){\r\n        /*\r\n        for(var i in this.dialogList){\r\n            var dialogID = this.dialogList[i];\r\n            this._closeUI(dialogID);\r\n        }\r\n        */\r\n    }\r\n    clearSystemUI(){\r\n        /*\r\n        for(var i in this.systemUIList){\r\n            var sysDialogID = this.systemUIList[i];\r\n            this._closeUI(sysDialogID);\r\n        }\r\n        */\r\n    }\r\n    \r\n    addSwallowLayer(){\r\n        /*\r\n        var eventObj = new cc.MJBaseEvent(cc.MJEventDefine.AddSwallowLayer);\r\n        cc.SgMJEventMgr.getInstance().dispatchEvent(eventObj);\r\n        */\r\n    }\r\n\r\n    delSwallowLayer(){\r\n        /*\r\n        var eventObj = new cc.MJBaseEvent(cc.MJEventDefine.DelSwallowLayer);\r\n        cc.SgMJEventMgr.getInstance().dispatchEvent(eventObj);\r\n        */\r\n    }\r\n    // update (dt) {},\r\n}\r\n"]}